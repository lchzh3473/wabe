class t{constructor({onRuntimeInitialized:t=(()=>function(t){const{FMOD:e}=t,i={};let s;return console.log("Creating FMOD System object\n"),s=e.System_Create(i),n(t,s),console.log("grabbing system object from temporary and storing it\n"),t.gSystem=i.val,console.log("set DSP Buffer size.\n"),s=t.gSystem.setDSPBufferSize(2048,2),n(t,s),console.log("initialize FMOD\n"),s=t.gSystem.init(1024,e.CREATESAMPLE,null),n(t,s),console.log("initialize Application\n"),console.log("Start game loop\n"),t._loadEndCallback(),e.OK}(this))}={}){this.FMOD={onRuntimeInitialized:t},async function(t){const n=document.createElement("script");await new Promise(((t,e)=>{n.src="./fmod/fmodL.js",n.onload=t,n.onerror=e,document.head.appendChild(n)})),n.remove(),FMODModule(t.FMOD)}(this).then((()=>{this.gChannel=null,this.gDSP=null,this.gEffects=!1,this.gSound=null,this.gSystem=null})),this._loadEndCallback=()=>{},this.ready=new Promise((t=>{this._loadEndCallback=t}))}readAsArrayBuffer(t){const e=new Uint8Array(t),i={},s=this.FMOD.CREATESOUNDEXINFO();s.length=e.length,this.gSound&&this.gSound.release();n(this,this.gSystem.createSound(e.buffer,this.FMOD.LOOP_OFF|this.FMOD.OPENMEMORY,s,i)),this.gSound=i.val}playSound(){const{FMOD:t}=this;if(this.gSound){const e={};let i;i=this.gSystem.playSound(this.gSound,null,!1,e),n(this,i),this.gChannel=e.val,i=this.gChannel.setCallback((function(n,e,i,s,o){return i===t.CHANNELCONTROL_CALLBACK_END&&(console.log("CALLBACK : Channel Ended"),t.gChannel=null),t.OK})),n(this,i)}}}function n(t,n){if(n!==t.FMOD.OK)throw`Error!!! '${t.FMOD.ErrorString(n)}'`}self.makeWAV=function(t=new ArrayBuffer(16),n=44100,e=16,i=1){const s=t.byteLength,o=new DataView(new ArrayBuffer(s+44));return o.setUint32(0,1380533830,!1),o.setUint32(4,s+36,!0),o.setUint32(8,1463899717,!1),o.setUint32(12,1718449184,!1),o.setUint32(16,16,!0),o.setUint16(20,1,!0),o.setUint16(22,i,!0),o.setUint32(24,n,!0),o.setUint32(28,n*i*e/8,!0),o.setUint16(32,i*e/8,!0),o.setUint16(34,e,!0),o.setUint32(36,1684108385,!1),o.setUint32(40,s,!0),new Uint8Array(o.buffer,44).set(new Uint8Array(t)),o.buffer},self.playWAV=function(t){const n=new AudioContext,e=n.createBufferSource();n.decodeAudioData(t,(t=>{e.buffer=t,e.connect(n.destination),e.start()}))};export{t as FMOD};
//# sourceMappingURL=fmod-d4b69bb3.js.map
